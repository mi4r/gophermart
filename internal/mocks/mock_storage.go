// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mi4r/gophermart/internal/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/mi4r/gophermart/internal/storage"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// Open mocks base method.
func (m *MockStorage) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockStorageMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStorage)(nil).Open))
}

// OrderCreate mocks base method.
func (m *MockStorage) OrderCreate(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OrderCreate indicates an expected call of OrderCreate.
func (mr *MockStorageMockRecorder) OrderCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCreate", reflect.TypeOf((*MockStorage)(nil).OrderCreate), arg0, arg1)
}

// OrderReadOne mocks base method.
func (m *MockStorage) OrderReadOne(arg0 string) (storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderReadOne", arg0)
	ret0, _ := ret[0].(storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrderReadOne indicates an expected call of OrderReadOne.
func (mr *MockStorageMockRecorder) OrderReadOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderReadOne", reflect.TypeOf((*MockStorage)(nil).OrderReadOne), arg0)
}

// OrdersReadByLogin mocks base method.
func (m *MockStorage) OrdersReadByLogin(arg0 string) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrdersReadByLogin", arg0)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OrdersReadByLogin indicates an expected call of OrdersReadByLogin.
func (mr *MockStorageMockRecorder) OrdersReadByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrdersReadByLogin", reflect.TypeOf((*MockStorage)(nil).OrdersReadByLogin), arg0)
}

// Ping mocks base method.
func (m *MockStorage) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping))
}

// UserCreate mocks base method.
func (m *MockStorage) UserCreate(arg0 storage.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockStorageMockRecorder) UserCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockStorage)(nil).UserCreate), arg0)
}

// UserReadAll mocks base method.
func (m *MockStorage) UserReadAll() ([]storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserReadAll")
	ret0, _ := ret[0].([]storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserReadAll indicates an expected call of UserReadAll.
func (mr *MockStorageMockRecorder) UserReadAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserReadAll", reflect.TypeOf((*MockStorage)(nil).UserReadAll))
}

// UserReadOne mocks base method.
func (m *MockStorage) UserReadOne(arg0 string) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserReadOne", arg0)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserReadOne indicates an expected call of UserReadOne.
func (mr *MockStorageMockRecorder) UserReadOne(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserReadOne", reflect.TypeOf((*MockStorage)(nil).UserReadOne), arg0)
}
